[
{
	"uri": "https://docs.lightstreams.network/examples/browser/",
	"title": "Example Browser Demo",
	"tags": [],
	"description": "",
	"content": " Source code Example Pure Browser Application using Lightstreams\nIntroduction This example decentralized application (DApp) demonstrates how two or more peers can connect together and securely share private content together without the need for a central server. You can point the application to your local Lightstreams Node (localhost:9000). By default it connects to our public gateway on the sirius testnet, https://gateway.sirius.lightstreams.io.\nBrowser Appplication The example is only made of static js/css/html and uses react, redux, and styled-components under the hood. The files that you upload are stored on the Lightstreams Node and the files\u0026rsquo; metadata are stored on browser\u0026rsquo;s localStorage. If you delete your localStorage, you will no longer see what files have been uploaded to your node.\njs-ipfs In order to discover other peers with whom to share content, the example application uses the the js-ipfs implementation of IPFS for peer-discovery. This is a bit overkill for now, but could allow for information or file-exchange before the actual sharing of private content.\nGetting started  Follow the steps in the README to install \u0026amp; run the application (the application should be running on http://localhost:8080 (we\u0026rsquo;ll call this running app, node1) Create an account with a password. This will generate a public key that you should write down somewhere, it can be used to login (with your password) and unlock your wallet on the Lightstreams Node. Request Lightstreams free test tokens to the newly created address (https://discuss.lightstreams.network/t/request-test-tokens/64) Upload some content Copy the File Meta Hash (under the \u0026ldquo;Files\u0026rdquo; sections) Paste the File Meta Hash in the \u0026ldquo;Download File\u0026rdquo; section Click on the Link to download the file  Grant access to/share content with another peer Once you\u0026rsquo;ve uploaded some content, you\u0026rsquo;ll probably want to grant access to someone else and share it with them.\n In a new browser (if you use Chrome, launch Firefox or Safari), we\u0026rsquo;ll launch another app (which we\u0026rsquo;ll call node2). Open the same URL: http://localhost:8080 Create an account with password In node1, go to your uploaded files and copy paste the account address from node2 into the input next to the \u0026ldquo;Grant to\u0026rdquo; button In node2, copy the File Meta Hash into the \u0026ldquo;Download File\u0026rdquo; section Click on the link to download the file. Tada! You are allowed to download the file. Try again, upload a file on node1, but this time skip Step3 (don\u0026rsquo;t grant access to node2). You should not be able to download the file!  Conclusion This Lightstreams browser application shows how two or more peers can securely share private content between one another without the need for a central server and using blockchain smart contracts to grant access/permissions to the files.\n"
},
{
	"uri": "https://docs.lightstreams.network/examples/nodejs-dashboard/",
	"title": "Example NodeJS Smart Vault Dashboard",
	"tags": [],
	"description": "",
	"content": " Source code Code\nIntroduction Lightstreams Smart Vault Dashboard app showcase an example of a decentralize app (Dapp) using Lightstreams Smart Vault SDK in a NodeJS.\nUsing this DApp you will be able to upload your files uploaded into a Lightstreams Smart Vault node and manage the its distribution and acceptability. In addition you will be able to also request access to other users files and manage the pending request to your own content made by other users.\nFeatures Create an account Login Your user wallet Upload file My files You can see the list of files you uploaded and which users have access to them. By clicking on one of the little icon you can revoke the access to the users at anytime.\nAlso you can download the content of the files you uploaded.\nGrant access to file Grant access to other users to your content without waiting for a access request.\nRequest access to other user file Insert the username of other user and load the list of available items of this user. By clicking on the locker icon you will send a access request to the file owner. In case you already got access to the file it will display the download action.\nManage pending access requests On this section it will listed the pending access requests from other users to your files.\nFreemium Model This project implements a simple freemium model to fund users activity within the platform. The source for this funding come from two different sources.\nThe first of them is what it was called stake holder account. This account is linked to every instance of the server application and it is funding the creation of new users through its own endpoints.\nThe second funding source is an Faucet smart contract 0xdf81615E44b34C7015bF148De30526A4863c0DcD which will fund the activity of users up to 10 PHTs. This smart contract can be top up by every entity interested in the growth of the project.\nOnce users exceeds the initial 10 PHTs they can request more tokens for their accounts contacting Lightstreams Dev Team either Telegram or on the Discuss forum\n"
},
{
	"uri": "https://docs.lightstreams.network/guides/exchange-integration/",
	"title": "Exchange Integration",
	"tags": [],
	"description": "",
	"content": " In this section, we will explain the steps to install and synchronize a Lightstreams PoA blockchain node. Moreover, as part of the functionalities required by token exchanges, we will be proving examples of how to interact with Lightstreams blockchain in order to create accounts, transfer tokens or fetch tx receipts.\nInstallation Lightstreams has released its own ethereum-compatible blockchain which uses Byzantine consensus to replace the original proof-of-work (PoW) from Ethereum.\nUsing lightchain you can connect to Lightstreams blockchain and use every functionality currently existing on Ethereum. See more in the command line documentation\nPre-compiled binaries Lightstreams provides precompiled binaries for the most popular Unix distributions: and macOS.\n== macOS ==\nwget \u0026quot;https://s3.eu-central-1.amazonaws.com/lightstreams-public/lightchain/latest/lightchain-osx\u0026quot; -O /usr/local/bin/lightchain  == Linux (amd64) ==\nwget \u0026quot;https://s3.eu-central-1.amazonaws.com/lightstreams-public/lightchain/latest/lightchain-linux-amd64\u0026quot; -O /usr/local/bin/lightchain  After downloading the binary, you will need to set the right executable permissions to it, as follow:\nchmod a+x /usr/local/bin/lightchain  From Source code In case you prefer to compile your own version of lightchain you just need to follow the instructions at this repository.\nRun Lightstreams node Once lightchain is installed we can proceed with the initialization and synchronization of a new lightstreams node.\nLightstreams implements two networks: mainnet and a testnet called sirius. At the minute lightchain is connecting by default to mainnet as our team is still working on the launch of the mainnet.\nNode initialization To initialise a new blockchain you need to run lightchain init and choose a local path where blockchain files are going to be stored.\nlightchain init --datadir=\u0026quot;${HOME}/.lightstreams-mainnet\u0026quot; --mainnet  Node launching To run a lightchain node you only need to run the following command:\nlightchain run --datadir=\u0026quot;${HOME}/.lightstreams-mainnet\u0026quot;  After the command is executed the Lightstreams node will proceed with the synchronization. Once the node is synchronized we should leave node running in order to interact with the blockchain.\nLightstreams also provides a block explorer to see which is the current state of the blockchain.\nHelp To see more available options for launching a lightchain node, check the client documentation section or execute in the terminal:\nlightchain run -h  Interact with Lightstreams node As it was mentioned above, Lightstreams node is fully ethereum-compatible therefore ethereum JSON RPC API is also available.\nTo enable those RPC endpoints, we need to specify the APIs we want to enable and the endpoints. At the command line argument, when Lightstreams node is launched, we need to include --rpc --rpcapi eth,net,web3,personal,admin. In case you want to enable the WebSocket endpoints you have to also use--ws\nlightchain run --datadir=\u0026quot;${HOME}/.lightstreams-mainnet\u0026quot; --rpc --rpcapi eth,net,web3,personal,admin --ws  By default RPC API is exposed over port :8545 and WebSocket over port :8546. In case you want to specify a different port, you may use the following flags --rpcport ${RPC_PORT} or --wsport ${WS_PORT} respectively.\nIn addition to those, IPC Unix socket is always enabled and you can find it at ${HOME}/.lightstreams-mainnet/database/geth.ipc (according to the values used on above example)\nExample As it is explained above we can interact with Lightstreams node as we would have been interacting with an Ethereum node. For instance, we could attach a Geth to the running Lightstreams node and create a new account and perform a transfer.\nStart interactive Geth console\ngeth attach http://localhost:8545  Create a new account\n\u0026gt; personal.newAccount(\u0026quot;passphrase\u0026quot;) \u0026quot;0xe7094bd66363c0442bd99ea00fccb19b0d272453\u0026quot;  Transfer tokens\n\u0026gt; eth.sendTransaction({from:eth.accounts[0], to:\u0026quot;0xe7094bd66363c0442bd99ea00fccb19b0d272453\u0026quot;, value: web3.toWei(0.05, \u0026quot;ether\u0026quot;)}) \u0026quot;0x2ca8bce6a70566a0869a9fd2ac74743e05fe19e17ec118d7a4933f07714faeed\u0026quot;  Read receipt\n\u0026gt; eth.getTransactionReceipt(\u0026quot;0x2ca8bce6a70566a0869a9fd2ac74743e05fe19e17ec118d7a4933f07714faeed\u0026quot;) { blockHash: \u0026quot;0xc96707c294c79b7d3667a59e5f097f72375d4b7f0135e0055eabc5e70ddec717\u0026quot;, blockNumber: 17793, contractAddress: null, cumulativeGasUsed: 21000, from: \u0026quot;0xc916cfe5c83dd4fc3c3b0bf2ec2d4e401782875e\u0026quot;, gasUsed: 21000, logs: [], logsBloom: \u0026quot;0xu0026quot;, status: \u0026quot;0x1\u0026quot;, to: \u0026quot;0xe7094bd66363c0442bd99ea00fccb19b0d272453\u0026quot;, transactionHash: \u0026quot;0x2ca8bce6a70566a0869a9fd2ac74743e05fe19e17ec118d7a4933f07714faeed\u0026quot;, transactionIndex: 0 }  "
},
{
	"uri": "https://docs.lightstreams.network/getting-started/",
	"title": "Getting started",
	"tags": [],
	"description": "",
	"content": " What is Lightstreams? Lightstreams is a permissioned blockchain protocol that enables users to share files \u0026amp;content in a secure and distributed manner. If you are a dapp developer, you can use the leth command line to let users store files/content and create authorization rules.\nFirst steps  Installation Quick start Private file sharing  "
},
{
	"uri": "https://docs.lightstreams.network/getting-started/install/",
	"title": "Install",
	"tags": [],
	"description": "",
	"content": "    Version Release Date     0.15.0-alpha 29.05.2019    Installation A Lightstreams node consists of the following pieces:\n leth is a command line interface used to run, interact, and control the Lightstreams node ipfs is a decentralised file system enhanced with our award winning “Permissioned Blocks” technology lightchain is a command line interface to connect to lightstreams ethereum compatible blockchain geth(Optional) is the the command line interface for running a full ethereum node implemented in Go  Leth Leth connects to permissioned blockchain protocol (Ethereum Smart Vault) to empower content creators to monetise their intellectual property data. It can be used a CLI or HTTP server.\nHow to install Pre-compiled binaries\n== macOS ==\nwget \u0026quot;https://s3.eu-central-1.amazonaws.com/lightstreams-public/leth/latest/leth-osx\u0026quot; -O /usr/local/bin/leth  == Linux (amd64) ==\nwget \u0026quot;https://s3.eu-central-1.amazonaws.com/lightstreams-public/leth/latest/leth-linux-amd64\u0026quot; -O /usr/local/bin/leth  Lightchain Lighstreams has released its own ethereum-compatible blockchain which uses byzantine consensus to replace the original proof-of-work (PoW) from Ethereum.\nUsing lightchain you can connect to Lightreams blockchain and use every functionality currently existing on Ethereum. See more in the command line documentation\nHow to install Source code\nFollow the instructions at this repository.\nPre-compiled binaries\n== macOS ==\nwget \u0026quot;https://s3.eu-central-1.amazonaws.com/lightstreams-public/lightchain/latest/lightchain-osx\u0026quot; -O /usr/local/bin/lightchain  == Linux (amd64) ==\nwget \u0026quot;https://s3.eu-central-1.amazonaws.com/lightstreams-public/lightchain/latest/lightchain-linux-amd64\u0026quot; -O /usr/local/bin/lightchain  IPFS (lightstreams version) IPFS is a peer-to-peer distributed file system that seeks to connect all computing devices with the same system of files.\nLightstreams has enhanced original implementation of IPFS to bring a to permissioned layer which allows users to control the access to after content is being distributed.\nHow to install Pre-compiled binaries\n== macOS ==\nwget \u0026quot;https://s3.eu-central-1.amazonaws.com/lightstreams-public/ipfs/latest/ipfs-osx\u0026quot; -O /usr/local/bin/ipfs  == Linux (amd64) ==\nwget \u0026quot;https://s3.eu-central-1.amazonaws.com/lightstreams-public/ipfs/latest/ipfs-linux-amd64\u0026quot; -O /usr/local/bin/ipfs  Geth (Optional) Only in case of using Rinkeby network.\nSource code\nFollow the official instructions\nPre-compiled binaries\n== macOS ==\nwget \u0026quot;https://s3.eu-central-1.amazonaws.com/lightstreams-public/geth/latest/geth-osx\u0026quot; -O /usr/local/bin/geth  == Linux (amd64) ==\nwget \u0026quot;https://s3.eu-central-1.amazonaws.com/lightstreams-public/geth/latest/geth-linux-amd64\u0026quot; -O /usr/local/bin/geth  Permissions In case you decide to install pre-compiled versions, it will be required another step in order to set the right executable permissions to those binaries, as follow:\nchmod u+x /usr/local/bin/leth chmod u+x /usr/local/bin/geth chmod u+x /usr/local/bin/lightchain chmod u+x /usr/local/bin/ipfs  Check installation \u0026gt; leth version Version: 0.15.0-alpha API CORS \u0026gt; ipfs version ipfs version 0.4.16-dev \u0026gt; lightchain version Version: 1.2.0 Rock \u0026amp;\u0026amp; Roll \u0026gt; geth version Geth Version: 1.8.23-stable Git Commit: c942700427557e3ff6de3aaf6b916e2f056c1ec2 Architecture: amd64 Protocol Versions: [63 62]  Next steps  Quick start Create an account Getting free tokens  "
},
{
	"uri": "https://docs.lightstreams.network/",
	"title": "Lightstreams documentation",
	"tags": [],
	"description": "",
	"content": " Welcome Hi there! Welcome to the Lightstreams documentation! Getting started\n"
},
{
	"uri": "https://docs.lightstreams.network/examples/intellectual-property/",
	"title": "Example DApp Document Authorizer Demo",
	"tags": [],
	"description": "",
	"content": " What is the Intellectual Property demo dapp? Lightstreams document authorizer demo intends to show case a real world document authorizer application where content creators could offer their intellectual property for selling in a decentralized manner using Lightstreams Smart Vault to guarantee the security and traceability of their published content.\nNodes Lightstreams provides two separate and independent nodes of this document authorizer demo to represent the real decentralization of this DApp.\n Demo Node 1 Demo Node 2  Application On every new session an user is automatically created and credited with 2 PHT. Below you can find a short explanation of the functionalities you can find in this demo.\nLightstreams WhitePaper On the Demo home page default there is pre-uploaded content to purchase, in this case it is the Lightstreams WhitePaper for the reasonable price of 0.2 PHT.\nUpload Content From home page click, or from the application service, on Publish or from the application menu.\nAfter you agree on the term\u0026amp;conditions it will start deploying a new Smart Contract which will hold the Access Control List(ACL) of the file you are about to upload. It is required to have at least 1 PHT to perform this action.\nOnce the deployment of the smart contract is completed, you fill up the form include a title and description for the new file, a cover image and the file itself. Click on Publish. After uploading and deployment is finished it will display a content profile card with the public and private information of the published content.\nLibrary On the Library every purchased and published content is being listed.\nShare your Content To purchase the content published by other users we need to Search for it using the Public Content ID provided after uploading was completed. Pasting that ID and click on Search the public data regarding the published content is displayed along with a Purchase button to proceed with the purchasing of the content.\nPurchase Content To purchase this content you need to click on the public link, this link loads the public metadata information about the content such as Title, Description, Cover image, Owner and price. After you click in Purchase it performs a purchase tx in the blockchain which send to the content owner to total amount set at the price.\nOnce the tx is completed the private content is loaded and downloadable. Also you can see the receipt of it and clicking on it you can see from Lightstreams Explorer the actual details of the transaction.\n"
},
{
	"uri": "https://docs.lightstreams.network/guides/",
	"title": "Guides",
	"tags": [],
	"description": "",
	"content": " This section includes specific guides for the integration of Lightstreams services.\nGuides  Exchange Integration  "
},
{
	"uri": "https://docs.lightstreams.network/getting-started/quick-start/",
	"title": "Quick start",
	"tags": [],
	"description": "",
	"content": " The following assumes you have leth installed. Please follow these instructions to install.\nGetting help Run leth help command to display all commands you have in disposition in the current version.\nLightstreams CLI for interacting with a configured node. Usage: leth [flags] leth [command] Available Commands: acl Features LethACL's pkg capabilities over CLI such as granting ACL permissions. auth Features LethAuth's pkg capabilities over CLI such as token generation, verification... docs Generates LETH cmd usage docs based on code into the: 'docs/cmd/auto_generated'. help Help about any command init Initializes new LS local node for a chosen network. run Runs full Leth node by spawning blockchain and IPFS daemons. storage Features LethStorage's pkg capabilities over CLI such as file upload/download, access authorization... version Describes version. ... ... Flags: -h, --help help for leth Use \u0026quot;leth [command] --help\u0026quot; for more information about a command.  Display current version:\nleth version Version: 0.15.0-alpha CORS API Display instructions for initializing new Lightstreams Node:\nleth init --help Initializes new LS local node for a chosen network. Usage: leth init [flags] Flags: -h, --help help for init --network string Possible values: \u0026#39;rinkeby|sirius\u0026#39;. --nodeid int ID of the node in order to support multiple nodes on the same machine. 0 by default. Go to the command line documentation to learn more about leth CLI.\nRunning Lightstreams node First, initialize new Leth node with ID 1 for Sirius network:\nleth init --nodeid=1 --network=sirius {\u0026#34;msg\u0026#34;:\u0026#34;Initializing Leth node...\u0026#34;,\u0026#34;nodeID\u0026#34;:1,\u0026#34;network\u0026#34;:\u0026#34;sirius\u0026#34;} {\u0026#34;msg\u0026#34;:\u0026#34;IPFS: initializing IPFS node at $HOME/.lightstreams_1/ipfs\u0026#34;} {\u0026#34;msg\u0026#34;:\u0026#34;IPFS: generating 2048-bit RSA keypair...done\u0026#34;} {\u0026#34;msg\u0026#34;:\u0026#34;IPFS: peer identity: Qma1bKbQVYqHMhWzaRHAkKU5s5FsDnhR5bMzWLbjwxUaN6\u0026#34;} {\u0026#34;msg\u0026#34;:\u0026#34;IPFS successfully initialized.\u0026#34;,\u0026#34;dataDir\u0026#34;:\u0026#34;$HOME/.lightstreams_1/ipfs\u0026#34;} {\u0026#34;msg\u0026#34;:\u0026#34;Sirius node successfully initialized.\u0026#34;,\u0026#34;dataDir\u0026#34;:\u0026#34;$HOME/.lightstreams_1/sirius\u0026#34;} {\u0026#34;msg\u0026#34;:\u0026#34;Leth node fully initialized!!!\u0026#34;,\u0026#34;nodeDir\u0026#34;:\u0026#34;$HOME/.lightstreams_1\u0026#34;} Secondly, run a lightstreams node:\nleth run --nodeid=1 --network=sirius {\u0026#34;msg\u0026#34;:\u0026#34;Starting Leth node online services (blockchain, IPFS)...\u0026#34;} {\u0026#34;msg\u0026#34;:\u0026#34;GETH: INFO [09-13|11:30:40.138] Maximum peer count ETH=25 LES=0 total=25\u0026#34;} {\u0026#34;msg\u0026#34;:\u0026#34;GETH: INFO [09-13|11:30:40.148] Starting peer-to-peer node instance=Geth/v1.8.15-stable-89451f1c/darwin-amd64/go1.10.4\u0026#34;} ...... {\u0026#34;msg\u0026#34;:\u0026#34;GETH: INFO [09-13|11:31:26.189] Imported new block receipts count=906 elapsed=9.521ms number=960 hash=413833…8d126d size=4.13kB ignored=0\u0026#34;} {\u0026#34;msg\u0026#34;:\u0026#34;GETH: INFO [09-13|11:31:26.390] Imported new block headers count=384 elapsed=149.265ms number=1344 hash=4524ae…5d3fff ignored=0\u0026#34;} {\u0026#34;msg\u0026#34;:\u0026#34;GETH: INFO [09-13|11:31:26.406] Imported new block receipts count=384 elapsed=2.144ms number=1344 hash=4524ae…5d3fff size=1.54kB ignored=0\u0026#34;} After you run the command above, the network synchronization will take several minutes. So grab a coffee and request some test tokens while you wait :)\nTo see the current state of the lightstreams test network (Sirius) and check the status of your transactions, you can go to the lightstreams block explorer\nUsing Rinkeby network If you prefer to run your leth over the Rinkeby network, just repeat the commands a using --network=rinkeby.\nExpose the Lighstreams HTTP API You need to run your leth server again, but this time using the --https flag as follow:\nleth run --nodeid=1 --network=sirius --https Even if flag used refers to https by default is exposed over http. In case you want to use a secure protocol, follow the instructions in the next section.\nRunning over HTTPs To initialize leth over HTTPs protocol you need to follow the next steps. At first you need to use valid SSL certificates which can be generated, for instance, by running the following bash command:\nmkdir -p /etc/ssl/leth cd /etc/ssl/leth openssl req -x509 -out localhost.crt -keyout localhost.key \\  -newkey rsa:2048 -nodes -sha256 \\  -subj \u0026#39;/CN=localhost\u0026#39; -extensions EXT -config \u0026lt;( \\  printf \u0026#34;[dn]\\nCN=localhost\\n[req]\\ndistinguished_name = dn\\n[EXT]\\nsubjectAltName=DNS:localhost\\nkeyUsage=digitalSignature\\nextendedKeyUsage=serverAuth\u0026#34;) chmod a+r localhost.crt localhost.key Once you have valid ssl certificates are allocated in your local machine, you have to edit leth node configuration file, at $HOME/.lightstreams_1/config.json, and include the path for your ssl certificates and the port where the HTTPs server is going to be exposed.\n{ \u0026#34;https_server\u0026#34;: { \u0026#34;port\u0026#34;: 8080, \u0026#34;certificate_pem_filepath\u0026#34;: \u0026#34;/etc/ssl/leth/localhost.crt\u0026#34;, \u0026#34;certificate_pem_priv_key_filepath\u0026#34;: \u0026#34;/etc/ssl/leth/localhost.key\u0026#34; }, ....  At last, you need to run your leth server again, but this time using the --https flag as follow:\nleth run --nodeid=1 --network=sirius --https Within the first debug output shown in your terminal you will see the next one:\n... {\u0026quot;level\u0026quot;:\u0026quot;debug\u0026quot;,\u0026quot;ts\u0026quot;:1544091804.1871579,\u0026quot;caller\u0026quot;:\u0026quot;http/server.go:28\u0026quot;,\u0026quot;msg\u0026quot;:\u0026quot;Starting Leth HTTP server listening on port: 8080.\u0026quot;} ...  Visit the following link to learn how to use leth http api.\nGet FREE Testing Tokens Obtaining PHT for Sirius To get free test tokens, please signup on our community forum and follow the instructions provided on this thread\nObtaining ETH for Rinkeby Connect to the Lightstreams node via IPC:\ngeth --datadir=$HOME/.lightstreams_1/rinkeby attach ipc:$HOME/.lightstreams_1/rinkeby/geth.ipc Create a new Leth node account using the attached Geth JavaScript console and check the its balance:\ngeth --datadir=$HOME/.lightstreams_1/rinkeby attach ipc:$HOME/.lightstreams_1/rinkeby/geth.ipc Welcome to the Geth JavaScript console! Instance: Geth/v1.8.15 \u0026gt; personal.newAccount() \u0026gt;\u0026gt; ...type your password... \u0026#34;0xa92e3705e6d70cb45782bf055e41813060e4ce07\u0026#34; \u0026gt; eth.accounts [\u0026#34;0xa92e3705e6d70cb45782bf055e41813060e4ce07\u0026#34;] \u0026gt; eth.coinbase \u0026#34;0xa92e3705e6d70cb45782bf055e41813060e4ce07\u0026#34; \u0026gt; eth.getBalance(eth.coinbase) 0 \u0026gt;  Request FREE ETH from Rinkeby Faucet:\n Publish your Ethereum address (0xa92e3705e6d70cb45782bf055e41813060e4ce07) anywhere in a public social network E.g, post your address to my Google Plus group Open https://www.rinkeby.io/#faucet and paste the post url Wait few seconds, if the blockchain is fully synced, check the balance once again eth.getBalance(eth.coinbase) -\u0026gt; 3000000000000000000  Learn more To learn more about how you can start sharing files using leth, go to the next section, File sharing\nHelp If in doubt, you can always run any command with a --help flag to show and explain to you all the possible flags and cmd usages.\nleth acl --help Need human help? We are happy to get you started! Join our telegram channel or ask as many questions as you want in the lightstreams forum!\n"
},
{
	"uri": "https://docs.lightstreams.network/examples/eshop/",
	"title": "Example eShop",
	"tags": [],
	"description": "",
	"content": " Introduction This example decentralized application (DApp) demonstrates how two or more peers can connect and securely sell/purchase commercial content together without the need for a central server.\nSource code Example Decentralized Peer-to-Peer eCommerce app written using ReactJS + Leth SDK\nApp The example is only made of static js/css/html and uses ReactJS framework.\nhttps://example-eshop.lightstreams.io\n1) Configuring Node Provider The first step is to configure a fully synced Lightstreams Node responsible for storing files in SmartVault, managing accounts and performing the blockchain Calls/TXs.\nWe encourage you to run your own local node. By default, the app connects to our public gateway on the Sirius Testnet.\n2) Configure Your Account Create your Lightstreams account or login using an existing one. The password will be used to encrypt, lock the keystore file on the node\u0026rsquo;s disk.\n3) Create a Shop After you configure your account, you enter a general dashboard where you can see all the eShops created by our community, the content being sold and how to buy it.\nFor simplicity of the demo, the metadata such as smart contract addresses of all the shops created by Lightstreams community are stored and aggregated in a real-time Firebase DB but when developing your own application, you can store them however you find appropriate. Smart contract? MySQL Database? IPFS?\nFor creating an eShop, you will need some PHT tokens. Request them at our forum.\nCreating a shop using the UI will create and deploy a new smart contract keeping track of the digital content you will be selling. This is possible thanks to the Leth SDK shop module booted on Lightstreams Node launch and exposed over CLI and HTTPS. For full documentation about the internals, visit our getting started with e-commerce guide.\n4) Sell/Buy Content Content on sale is stored in the configured node\u0026rsquo;s SmartVault.\nE.g, you can purchase a picture of a fountain I took in Mallorca for 15 Sirius test network PHTs. Behind the scenes, the SmartVault will grant you a permission to access this picture, securely stored in Lightstreams enhanced permissioned IPFS, the moment the Shop\u0026rsquo;s Smart Contract receives the funds.\nConclusion Thanks to Lightstreams SDK, Leth, creating DApps and monetizing commercial content was never easier!\nGetting started with e-commerce guide.\n"
},
{
	"uri": "https://docs.lightstreams.network/examples/",
	"title": "Examples",
	"tags": [],
	"description": "",
	"content": "Using Lightstreams, we implemented the following example projects:\n file sharing browser demo eshop nodejs-dashboard document authorization \u0026amp; sharing JS SDK  "
},
{
	"uri": "https://docs.lightstreams.network/examples/js-sdk/",
	"title": "Leth JS SDK",
	"tags": [],
	"description": "",
	"content": "In order to facilitate the integration and usage of Leth Lightstreams team implemented a Javascript SDK which bridges the endpoints of the Lightstreams Gateway HTTP api to a Node Express server\nYou can find the project repository here\n"
},
{
	"uri": "https://docs.lightstreams.network/getting-started/file-sharing/",
	"title": "Private file sharing",
	"tags": [],
	"description": "",
	"content": " Once your Lightstreams node is fully synced and you own some PHT(or ETH), you can start distributing files! If you still don\u0026rsquo;t have a lightstream node running locally and fully synchronize, follow the instructions here\nPrivate File Sharing for dApps, content producers Files are protected using Access Control List(ACL) and every access is authenticated and authorized before any content seeding starts! Not just encrypted publicly in IPFS, what majority of projects do. Privacy vs Confidentiality in action.\nStorage files Each file uploaded using Leth generates 2 IPFS files:\n The uploaded file itself. (`/tmp/secret_file.txt) A public metadata document(meta, in json format, describing the protected file  Adding a private file Given a file such as \u0026ldquo;/tmp/secret_file.txt\u0026rdquo;, with content Hello secret world.\nTo share a private file using leth execute the following command:\nleth storage add --nodeid=1 --network=sirius --owner=0xa92e3705e6d70cb45782bf055e41813060e4ce07 \\  --file=/tmp/secret_file.txt Where:\n --nodeid=1; --network=sirius identifies the lightstreams node running at this time locally --file= flag is an absolute path to the file you want to share --owner= flag is file owner address who will pay for the file ACL. The account address was generated when you signed-up  We insert the passphrase for the account 0xa92e3705e6d70cb45782bf055e41813060e4ce07\nEnter keystore password to unlock account: We will obtain a similar output as following:\n...some logs, we keep logging on DEBUG level in Alpha version for debugging early bugs File successfully uploaded to IPFS storage.\t{\u0026#34;meta\u0026#34;: \u0026#34;QmZYSewpHNvdW1TTgska792QAT7Yd6yxZAoybpYFskTZSf\u0026#34;} {\u0026#34;meta\u0026#34;:\u0026#34;QmZYSewpHNvdW1TTgska792QAT7Yd6yxZAoybpYFskTZSf\u0026#34;,\u0026#34;acl\u0026#34;:\u0026#34;0xc2DBC8CdAba2df432C821639B80302f0675D6f74\u0026#34;} Note:\n \u0026quot;meta\u0026quot; this is the address of a public Meta file linking to your private file in a secure IPFS storage \u0026quot;acl\u0026quot; this is the file\u0026rsquo;s ACL. A smart contract addr controlling all the access rules. You can use it leth acl grant cmd to grant permissions to other accounts  Reading the private file Now you can tell your friend who is running another Lightstreams node on his computer to download your private file!\nFor testing proposed you may setup another Lightstreams node locally, using a different nodeid and on the same network, as follow:\nleth init --nodeid=2 --network=sirius leth run --nodeid=2 --network=sirius ...wait a few minutes for a full sync... Once your Lightstreams node is full synced, attempt to read the private file from your new Lightstreams node 2:\nleth storage fetch --nodeid=2 --network=sirius --account=0xnode2ethAddr0cb45782bf055e41813060e4ce89 \\  --meta=QmZYSewpHNvdW1TTgska792QAT7Yd6yxZAoybpYFskTZSf Output:\n{\u0026#34;error\u0026#34;: {\u0026#34;code\u0026#34;: \u0026#34;err_cli\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;unable to download file to IPFS storage. Error: ipfs cat cmd timed out\u0026#34;} This error is expected because the file owner never actually granted permission to Lightstreams node 2 account, 0xnode2ethAddr0cb45782bf055e41813060e4ce89.\nLet\u0026rsquo;s grant a read permission.\nGranting read access to the private file Only the owner of the file can grant access to its files. In this case we go back to the original terminal where owner account was set and execute the following command:\nleth acl grant --nodeid=1 --network=sirius --permission=read --owner=0xa92e3705e6d70cb45782bf055e41813060e4ce07 \\ --acl=0x2F15B633b4bC41BdFBBD8AAf2Be7Dae958D27C7E --to=0xnode2ethAddr0cb45782bf055e41813060e4ce89 Where:\n acl corresponds to the smart contract address provided after we published the file to is the account we are granting access to permission is the permission to grant, it may be: [\u0026lsquo;read\u0026rsquo;, \u0026lsquo;write\u0026rsquo;, \u0026lsquo;admin\u0026rsquo;]  Output:\n{\u0026#34;msg\u0026#34;:\u0026#34;Granting \u0026#39;read\u0026#39; permission to account \u0026#39;0xnode2ethAddr0cb45782bf055e41813060e4ce89\u0026#39;...\u0026#34;} {\u0026#34;msg\u0026#34;:\u0026#34;Account \u0026#39;0xnode2ethAddr0cb45782bf055e41813060e4ce89\u0026#39; was granted \u0026#39;read\u0026#39; permission.\u0026#34;} {\u0026#34;is_granted\u0026#34;:\u0026#34;true\u0026#34;} Let\u0026rsquo;s go back to the second account terminal, and try to read the secret_file.txt file now:\nleth storage fetch --nodeid=2 --network=sirius --meta=QmZYSewpHNvdW1TTgska792QAT7Yd6yxZAoybpYFskTZSf --account=0xnode2ethAddr0cb45782bf055e41813060e4ce89 Leth SDK will resolve the linked protected file out of the JSON Meta file and save it to a tmp directory using the hash of the protected file itself and the extension of the uploaded file resolved from the JSON Meta file.\nOutput:\n{\u0026#34;output\u0026#34;:\u0026#34;/tmp/secret_file.txt\u0026#34;} Congratulation, you just shared a private file over Internet in a decentralised manner.\nPS: You can always run any command with --help flag to get explanation of all required/optional flags\nleth acl grant --help Granting admin access to the private file Going step further. You can also grant `admin rights to other accounts, devices so they can further have the privileges of granting read/admin access to other users.\nExample, let\u0026rsquo;s grant an admin right to the Leth Node 2 account. With such a privilege, Leth Node 2 account will be able to further grant access to other devices in the network/users.\nleth acl grant --nodeid=1 --network=sirius --permission=admin --acl=0x2F15B633b4bC41BdFBBD8AAf2Be7Dae958D27C7E --owner=0xa92e3705e6d70cb45782bf055e41813060e4ce07 --to=0xnode2ethAddr0cb45782bf055e41813060e4ce89 Reading the public Meta file In case you want to get information about the privately stored file, you can do so using the leth storage meta command.\nleth storage meta --nodeid=1 --network=sirius --meta=QmZYSewpHNvdW1TTgska792QAT7Yd6yxZAoybpYFskTZSf Output:\n{ \u0026#34;filename\u0026#34;:\u0026#34;secret_file.txt\u0026#34;, \u0026#34;ext\u0026#34;:\u0026#34;txt\u0026#34;, \u0026#34;owner\u0026#34;:\u0026#34;0xadC486F16F003897fb927e22438cb1b820f79879\u0026#34;, \u0026#34;hash\u0026#34;:\u0026#34;QmRnXxBJg3NjXzuTi91iNYcMff4oz4NwjN7fgtBXp2UbG9\u0026#34;, \u0026#34;acl\u0026#34;:\u0026#34;0x3cb99420c7F16f00ef41B5ace9e0C815F3736879\u0026#34; } Note:\n filename is the original filename when file was uploaded ext is the original file extension owner who uploaded the file hash the hash of the protected file stored in IPFS (not the public Meta file hash) acl address of the contract handling file permissions  "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/",
	"title": "Command line documentation",
	"tags": [],
	"description": "",
	"content": " Summary Here you will find all the documentation regarding the different command line tools provided by Lightstreams:\n leth CLI API reference lightchain CLI API reference  leth leth is a command line interface used to run, interact, and control the Lightstreams node.\n leth CLI API reference  lightchain lightchain is the official Lightstreams implementation of a proof-of-authority (PoA) blockchain. Lightchain is an ethereum-compatible blockchain which uses byzantine consensus to replace the original proof-of-work (PoW) from Ethereum. This is achieved by integrating Tendermint for the consensus layer.\n lightchain CLI API reference  "
},
{
	"uri": "https://docs.lightstreams.network/getting-started/peer-to-peer-ecommerce/",
	"title": "Ecommerce",
	"tags": [],
	"description": "",
	"content": " If you followed the Private File Sharing tutorial you learned how to obtain free PHTs and how to distribute files in peer-to-peer manner.\nIn this tutorial you will learn how to sell your digital content and how other users can buy it without any intermediary!\nSelling digital content The decentralized shopping support was added to Leth in version 0.12.1. Make sure you have the latest version by running:\n~ $leth version Version: 0.12.1-alpha LethShop Boot your local node connected to a Sirius test network. In this tutorial we will use NodeID 101 representing the Seller\u0026rsquo;s node.\nleth run --nodeid=101 --network=sirius Add the commercial content, you wish to sell later, to your node\u0026rsquo;s storage. We will be selling a \u0026ldquo;rare\u0026rdquo; image from the It Crowd series.\nleth storage add --nodeid=101 --network=sirius --owner=0xd119b8b038d3a67d34ca1d46e1898881626a082b --file=/Users/enchanterio/Downloads/it-crowd.jpg Authorize the ACL creation protecting your commercial file:\nEnter password to decrypt the account PK and store it in memory: \u0026lt;type your keystore password\u0026gt; File successfully added:\n{\u0026#34;acl\u0026#34;:\u0026#34;0xEB9D37F30F406e2642E211C19Ed6F7A5FC6d8Ec4\u0026#34;,\u0026#34;meta\u0026#34;:\u0026#34;QmNnUze4f1QfnSQJFFco2hdPWZb2iXUjcB2onAzxLQQj5f\u0026#34;} Note: This file is at this exact moment still private.\nCreate your online Shop:\nleth shop create --nodeid=101 --network=sirius --from=0xd119b8b038d3a67d34ca1d46e1898881626a082b Output:\n{\u0026#34;shop\u0026#34;:\u0026#34;0xffeF98e9de5524Eaf82A8DE88B031160f694a90A\u0026#34;} Check the Shop Balance using Sirius Blockchain Explorer: https://explorer.sirius.lightstreams.io/addr/0xffef98e9de5524eaf82a8de88b031160f694a90a\nSell the access to your file, let\u0026rsquo;s say for 1 PHT, at your newly created online, decentralized shop:\nleth shop sell --nodeid=101 --network=sirius --shop=0xffeF98e9de5524Eaf82A8DE88B031160f694a90A --acl=0xEB9D37F30F406e2642E211C19Ed6F7A5FC6d8Ec4 --price_wei=1000000000000000000 --from=0xd119b8b038d3a67d34ca1d46e1898881626a082b Result:\n{\u0026#34;success\u0026#34;:\u0026#34;true\u0026#34;} From this moment, anyone can get read access to your commercial content by simply purchasing the permission to access it.\nYou can announce in social media that the Read ACL Permission 0xEB9D37F30F406e2642E211C19Ed6F7A5FC6d8Ec4 to your file QmNnUze4f1QfnSQJFFco2hdPWZb2iXUjcB2onAzxLQQj5f is available to be purchased for 1 PHT at your online digital shop: 0xffeF98e9de5524Eaf82A8DE88B031160f694a90A.\nBuying digital content All the steps below will be executed on a separate Node with ID 102.\nIf a malicious buyer would try to by-pass the purchasing process and download the file directly, he would run into an error:\nleth storage fetch --nodeid=102 --network=sirius --account=0xf3eedaed3440614b6d9ac1ef0d910494c6bc73a8 --meta=QmNnUze4f1QfnSQJFFco2hdPWZb2iXUjcB2onAzxLQQj5f Error output:\n{\u0026#34;error\u0026#34;:{\u0026#34;message\u0026#34;:\u0026#34;unable to fetch the file from IPFS storage. Error: ipfs cat cmd timed out\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;ERROR_UNKNOWN\u0026#34;}} Note: The timeout means there is no public copy of this file. Either the file doesn\u0026rsquo;t exist or all copies are protected by ACL.\nBuying the ACL Read Permission:\nleth shop buy --nodeid=102 --network=sirius --shop=0xffeF98e9de5524Eaf82A8DE88B031160f694a90A --acl=0xEB9D37F30F406e2642E211C19Ed6F7A5FC6d8Ec4 --from=0xf3eedaed3440614b6d9ac1ef0d910494c6bc73a8 You will be prompted to authorize the purchase:\nEnter password to decrypt the account PK and store it in memory: \u0026lt;type your keystore password\u0026gt; Output:\n{\u0026#34;success\u0026#34;:\u0026#34;true\u0026#34;} The buyer can now access the purchased file:\nleth storage fetch --nodeid=102 --network=sirius --account=0xf3eedaed3440614b6d9ac1ef0d910494c6bc73a8 --meta=QmNnUze4f1QfnSQJFFco2hdPWZb2iXUjcB2onAzxLQQj5f Output:\n{\u0026#34;output\u0026#34;:\u0026#34;/var/folders/f9/11wh9x9j31d75nxgwv2qsj3r0000gn/T/it-crowd.jpg\u0026#34;} Let\u0026rsquo;s open it:\nopen /var/folders/f9/11wh9x9j31d75nxgwv2qsj3r0000gn/T/it-crowd.jpg Shop sale earnings https://explorer.sirius.lightstreams.io/addr/0xffef98e9de5524eaf82a8de88b031160f694a90a\nShop balance increased to 1 PHT: "
},
{
	"uri": "https://docs.lightstreams.network/http-api/",
	"title": "API",
	"tags": [],
	"description": "",
	"content": " Table of contents  HTTP API Reference  Error Types HTTP status code summary 200 - OK Everything worked as expected. 400 - Bad Request Sent parameters were invalid. 403 - Unauthorized Not authorized request or invalid API token. 500 - Server Error Something went wrong on server side.  "
},
{
	"uri": "https://docs.lightstreams.network/faqs/",
	"title": "FAQs",
	"tags": [],
	"description": "",
	"content": " What is Lightstreams? Lightstreams brings the capability of storing assets (files) in conjunction with Blockchain technology in a efficient, low-priced and decentralized manner. The key innovation is an advanced permissioning system that lets content producers store and monetise their intellectual property (text, images, music, movies).\nA new generation of internet applications (known as Decentralised Applications or DApps) can also be developed using this technology. Lightstreams lets DApp developers store and manage access to files needed for their DApps that cannot be privately or cheaply be stored with other blockchains.\nLightstreams is a public blockchain. This means that is 100% open for anyone to connect without restrictions. However, unlike most public blockchains, files on Lightstreams are stored securely and privately and only distributed with permission on a peer-to-peer basis. Each content producer or DApp developer is able to share protected content quickly with granular control and access tracking. This ensures transparency and auditability of when, how, and by whom data was approved and transmitted between users. DApp developers developing smart contracts on blockchain (including but not limited to Ethereum’s public blockchain) can seamlessly reference files stored on the Lightstreams network.\nWhy build on Lightstreams?  Real-world identities Use people’s verified identity to build real-world applications. Distributed Secure Storage Network Distributed secure storage is made available to applications to permit access to content in a decentralised environment. Fast. Scalable Get all the benefits from a decentralized infrastructure for distributing content without blockchain scaling issues. Trustless Build decentralized marketplaces with peer-to-peer exchanges.  Why use DApps built on Lightstreams?  Self-sovereign identity Users control their identity. They decide who can see and use it. Users control \u0026amp; manage their own data. Applications always need to request permissions to use it. No single point of failure for data breaches that can occur in traditional highly centralised internet services. Monetise content Higher royalty earnings by digital content and intellectual property direct sales. Users earn income for curating discoverable content. Users can hold in tokens associated with content to benefit from appreciation in value. Decentralised network Participation in a network that is not controlled by any one entity. Self-governance for an open, fair and stable network Each user\u0026rsquo;s vote determines the direction of the network.  Who needs Lighststreams?  DApps that require high security for managing access to information. Data is protected through ensuring only the correct people (or businesses) can see the information (eg only your doctors or lawyer). Distributed sharing of data with authorised people eliminates any centralised point of weakness that can be breached.\n Consumers who want to control their data privacy by allowing them to be (monetarily) rewarded for sharing select information only to the companies they trust (and no one else)\n Those selling digital content (eg music/audio) with rights of ownership (and royalties for artists) automatically included.\n Business that require confidential legal documents to be digitally signed directly between parties without requiring an intermediary to facilitate execution.\n  How does it work? Lightstreams uses its own Ethereum-compatible blockchain for the transparent and auditable management of file-access permissions, and a separate enhanced IPFS protocol for encrypted file storage and peer-to-peer file distribution. The Lightstreams blockchain is based on Ethereum but modified for shorter block times and also replaces the wasteful proof-of-work protocol with proof-of-authority.\nWhat does this enable? Lightstreams allows content producers to monetise their intellectual property. Content producers will be able to share files, images, music and movies and monetise them directly without needing a third party to host the content or broker the details - the smart contracts on the Lightstreams blockchain manage the payments and permissioning.\nDApps that use Lightstreams will allow users to access content such as audio, video or images in a fast and responsive manner - currently not possible on Ethereum’s public blockchain. We imagine two scenarios, one being DApps built on Ethereum referencing files on Lightstreams, and the other being DApps built directly on Lightstreams. As Lightstreams’ blockchain is compatible with Ethereum, moving a DApp from Ethereum to Lightstreams is simple.\nWhat is an InterPlanetary File System (IPFS)? The InterPlanetary File System (IPFS) protocol can be described as a standard to create a content-addressable peer-to-peer method of storing and retrieving data in a distributed file system. The content-addressing system guarantees that the data retrieved always matches the address used for finding the data. It is decentralised, meaning there is no dependency on any one computer or entity for hosting the data. Data is be replicated to multiple computers as it is shared, this add many layers of redundancy. In other words, every computer hosting a specific piece of data would need to be compromised to lose the data.\nThe hypermedia protocol also scales on demand - the more demand there is for a file, the more copies are made and so the faster the data transfer of that file becomes by virtue of the increased number of computers sharing files/content/data at the same time.\nWhat is Ethereum? Ethereum is a public, open-source blockchain-based computing platform. Its main feature is that of a Ethereum Virtual Machine (EVM) for running modules of application code called smart contracts. A user may think of Ethereum as an operating system for running apps (like a smartphone that can run multiple apps). Ethereum is decentralised. The system or network is not run by one specific entity that owns the infrastructure.\nSmart Contracts are used to enact business logic, essential for DApps on the Ethereum network. A smart contract is suitable for small data, they are not suitable for the storage and retrieval of media files.\n"
},
{
	"uri": "https://docs.lightstreams.network/support/",
	"title": "Support",
	"tags": [],
	"description": "",
	"content": "Need help? have questions? any feedback? Get in touch with us.\n Telegram Discuss forum  "
},
{
	"uri": "https://docs.lightstreams.network/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.lightstreams.network/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/",
	"title": "leth",
	"tags": [],
	"description": "",
	"content": " leth Lightstreams CLI for interacting with a configured node.\nSynopsis Lightstreams CLI for interacting with a configured node.\nleth [flags]  Options  -h, --help help for leth  SEE ALSO  leth acl - Features LethACL\u0026rsquo;s pkg capabilities over CLI such as granting ACL permissions. leth auth - Features LethAuth\u0026rsquo;s pkg capabilities over CLI such as token generation, verification\u0026hellip; leth docs - Generates LETH cmd usage docs based on code into the: \u0026lsquo;docs/cmd/auto/generated\u0026rsquo;. leth init - Initializes new LS local node for a chosen network. leth run - Runs full Leth node by spawning blockchain and IPFS daemons. leth shop - Features LethShop\u0026rsquo;s pkg capabilities over CLI such as selling/buying digital content. leth storage - Features LethStorage\u0026rsquo;s pkg capabilities over CLI such as file upload/download, access authorization\u0026hellip; leth user - Features LethUser\u0026rsquo;s pkg capabilities over CLI such as creating a user, converting him to a token\u0026hellip; leth version - Describes version. leth wallet - Features LethWallet\u0026rsquo;s pkg capabilities over CLI such as retrieving current balance and transferring funds.  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/acl/",
	"title": "leth acl",
	"tags": [],
	"description": "",
	"content": " leth acl Features LethACL\u0026rsquo;s pkg capabilities over CLI such as granting ACL permissions.\nSynopsis Features LethACL\u0026rsquo;s pkg capabilities over CLI such as granting ACL permissions.\nleth acl [flags]  Options  -h, --help help for acl  SEE ALSO  leth - Lightstreams CLI for interacting with a configured node. leth acl grant - Grant an ACL permission to another account. leth acl grant-public - Grant a read access to everybody. leth acl revoke-public - Revoke a public read access from everybody.  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/acl/grant/",
	"title": "leth acl grant",
	"tags": [],
	"description": "",
	"content": " leth acl grant Grant an ACL permission to another account.\nSynopsis Usage:\nleth acl grant --nodeid=1 --network=rinkeby --permission=read --acl=0xd966aa573f8AcBfEb3724B661B420c258ceA5D38 --owner=0xadC486F16F003897fb927e22438cb1b820f79879 --to=0xadc486f16f003897fb927e22438cb1b820f79879  Possible Outputs:\n{\u0026quot;is/granted\u0026quot;:\u0026quot;true\u0026quot;} {\u0026quot;error\u0026quot;: {\u0026quot;code\u0026quot;: \u0026quot;SOME/INTERNAL/ERROR/CODE\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;explanatory error message\u0026quot;}}  leth acl grant [flags]  Options  --acl string ACL ID (Deployed Smart Contract Hex Addr) associated with the stored file. -h, --help help for grant --network string Possible values: 'sirius', 'mainnet', 'standalone', 'rinkeby', 'ganache'. --nodeid int ID of the node in order to support multiple nodes on the same machine. 0 by default. --owner string The account with rights to grant the ACL permission. --permission string Permission to grant. Possible values: [noaccess,read,write,admin] --to string Account address to whom the permission should be granted.  SEE ALSO  leth acl - Features LethACL\u0026rsquo;s pkg capabilities over CLI such as granting ACL permissions.  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/acl/grant-public/",
	"title": "leth acl grant-public",
	"tags": [],
	"description": "",
	"content": " leth acl grant-public Grant a read access to everybody.\nSynopsis Usage:\nleth acl grant-public --nodeid=1 --network=rinkeby --acl=0xd966aa573f8AcBfEb3724B661B420c258ceA5D38 --owner=0xadC486F16F003897fb927e22438cb1b820f79879  Possible Outputs:\n{\u0026quot;is/granted\u0026quot;:\u0026quot;true\u0026quot;} {\u0026quot;error\u0026quot;: {\u0026quot;code\u0026quot;: \u0026quot;SOME/INTERNAL/ERROR/CODE\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;explanatory error message\u0026quot;}}  leth acl grant-public [flags]  Options  --acl string ACL ID (Deployed Smart Contract Hex Addr) associated with the stored file. -h, --help help for grant-public --network string Possible values: 'sirius', 'mainnet', 'standalone', 'rinkeby', 'ganache'. --nodeid int ID of the node in order to support multiple nodes on the same machine. 0 by default. --owner string The account with rights to grant the ACL permission.  SEE ALSO  leth acl - Features LethACL\u0026rsquo;s pkg capabilities over CLI such as granting ACL permissions.  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/acl/revoke-public/",
	"title": "leth acl revoke-public",
	"tags": [],
	"description": "",
	"content": " leth acl revoke-public Revoke a public read access from everybody.\nSynopsis Usage:\nleth acl revoke-public --nodeid=1 --network=rinkeby --acl=0xd966aa573f8AcBfEb3724B661B420c258ceA5D38 --owner=0xadC486F16F003897fb927e22438cb1b820f79879  Possible Outputs:\n{\u0026quot;is/revoked\u0026quot;:\u0026quot;true\u0026quot;} {\u0026quot;error\u0026quot;: {\u0026quot;code\u0026quot;: \u0026quot;SOME/INTERNAL/ERROR/CODE\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;explanatory error message\u0026quot;}}  leth acl revoke-public [flags]  Options  --acl string ACL ID (Deployed Smart Contract Hex Addr) associated with the stored file. -h, --help help for revoke-public --network string Possible values: 'sirius', 'mainnet', 'standalone', 'rinkeby', 'ganache'. --nodeid int ID of the node in order to support multiple nodes on the same machine. 0 by default. --owner string The account with rights to grant the ACL permission.  SEE ALSO  leth acl - Features LethACL\u0026rsquo;s pkg capabilities over CLI such as granting ACL permissions.  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/auth/",
	"title": "leth auth",
	"tags": [],
	"description": "",
	"content": " leth auth Features LethAuth\u0026rsquo;s pkg capabilities over CLI such as token generation, verification\u0026hellip;\nSynopsis Usage:\nleth auth --nodeid=1 --network=rinkeby --token=eyJibG9ja2NoYWluIjoiRVRIIiwiZXRoX2FkZHJlc3MiOiIweEM5NjZhYTU3MzA4QWNCZkViMzcyNkI2NjFCQzIwYzI1OGNlQTVEMzgiLCJpYXQiOjI3NzExNDUsImVhdCI6Mjc3MTIwNX0.2Z2Qm8MSVaTTVZRbtIjuKjjQXYFuprmmo5Okat85RiIkEwIFQObaimFkCieonHG6dyFqKx6h-hFdGeV8DbtEbAE  Possible Outputs:\n{\u0026quot;is/authenticated\u0026quot;:\u0026quot;true\u0026quot;,\u0026quot;user\u0026quot;:\u0026quot;0xC966aa57308AcBfEb3726B661BC20c258ceA5D38\u0026quot;} {\u0026quot;error\u0026quot;: {\u0026quot;code\u0026quot;: \u0026quot;SOME/INTERNAL/ERROR/CODE\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;explanatory error message\u0026quot;}}  leth auth [flags]  Options  -h, --help help for auth --network string Possible values: 'sirius', 'mainnet', 'standalone', 'rinkeby', 'ganache'. --nodeid int ID of the node in order to support multiple nodes on the same machine. 0 by default. --token string Token to authenticate.  SEE ALSO  leth - Lightstreams CLI for interacting with a configured node.  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/docs/",
	"title": "leth docs",
	"tags": [],
	"description": "",
	"content": " leth docs Generates LETH / usage docs based on code into the: \u0026lsquo;docs/cmd/auto/generated\u0026rsquo;.\nSynopsis Generates LETH / usage docs based on code into the: \u0026lsquo;docs/cmd/auto/generated\u0026rsquo;.\nleth docs [flags]  Options  -h, --help help for docs  SEE ALSO  leth - Lightstreams CLI for interacting with a configured node.  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/init/",
	"title": "leth init",
	"tags": [],
	"description": "",
	"content": " leth init Initializes new LS local node for a chosen network.\nSynopsis Initializes new LS local node for a chosen network.\nleth init [flags]  Options  --force Force node data initialization, erase previous folder in case this exists. False by default. -h, --help help for init --network string Possible values: 'sirius', 'mainnet', 'standalone', 'rinkeby', 'ganache'. --nodeid int ID of the node in order to support multiple nodes on the same machine. 0 by default.  SEE ALSO  leth - Lightstreams CLI for interacting with a configured node.  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/run/",
	"title": "leth run",
	"tags": [],
	"description": "",
	"content": " leth run Runs full Leth node by spawning blockchain and IPFS daemons.\nSynopsis Runs full Leth node by spawning blockchain and IPFS daemons.\nleth run [flags]  Options  -h, --help help for run --https Serves an HTTPs server on your localhost. False by default. --network string Possible values: 'sirius', 'mainnet', 'standalone', 'rinkeby', 'ganache'. --nodeid int ID of the node in order to support multiple nodes on the same machine. 0 by default.  SEE ALSO  leth - Lightstreams CLI for interacting with a configured node.  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/shop/",
	"title": "leth shop",
	"tags": [],
	"description": "",
	"content": " leth shop Features LethShop\u0026rsquo;s pkg capabilities over CLI such as selling/buying digital content.\nSynopsis Features LethShop\u0026rsquo;s pkg capabilities over CLI such as selling/buying digital content.\nleth shop [flags]  Options  -h, --help help for shop  SEE ALSO  leth - Lightstreams CLI for interacting with a configured node. leth shop buy - Buys the ACL permission to digital content from owner\u0026rsquo;s online shop, smart contract. leth shop create - Creates an online shop, smart contract, for selling/buying digital content. leth shop sell - Puts an ACL permission to digital content for sale in owner\u0026rsquo;s online shop, smart contract.  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/shop/buy/",
	"title": "leth shop buy",
	"tags": [],
	"description": "",
	"content": " leth shop buy Buys the ACL permission to digital content from owner\u0026rsquo;s online shop, smart contract.\nSynopsis Usage:\nleth shop buy --nodeid=1 --network=rinkeby --shop=0xshopIDF16F003897fb927e22438cb1b820f79879 --acl=0xd966aa573f8AcBfEb3724B661B420c258ceA5D38 --from=0xadC486F16F003897fb927e22438cb1b820f79879  Possible Outputs:\n{\u0026quot;success\u0026quot;:\u0026quot;true\u0026quot;} {\u0026quot;error\u0026quot;: {\u0026quot;code\u0026quot;: \u0026quot;SOME/INTERNAL/ERROR/CODE\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;explanatory error message\u0026quot;}}  leth shop buy [flags]  Options  --acl string ACL ID to buy. --from string The account buying the ACL permission. -h, --help help for buy --network string Possible values: 'sirius', 'mainnet', 'standalone', 'rinkeby', 'ganache'. --nodeid int ID of the node in order to support multiple nodes on the same machine. 0 by default. --shop string Shop ID where ACL can be bought.  SEE ALSO  leth shop - Features LethShop\u0026rsquo;s pkg capabilities over CLI such as selling/buying digital content.  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/shop/create/",
	"title": "leth shop create",
	"tags": [],
	"description": "",
	"content": " leth shop create Creates an online shop, smart contract, for selling/buying digital content.\nSynopsis Usage:\nleth shop create --nodeid=1 --network=rinkeby --from=0xadC486F16F003897fb927e22438cb1b820f79879  Possible Outputs:\n{\u0026quot;shop\u0026quot;:\u0026quot;0xshopIDF16F003897fb927e22438cb1b820f79879\u0026quot;} {\u0026quot;error\u0026quot;: {\u0026quot;code\u0026quot;: \u0026quot;SOME/INTERNAL/ERROR/CODE\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;explanatory error message\u0026quot;}}  leth shop create [flags]  Options  --from string The owner of the shop. -h, --help help for create --network string Possible values: 'sirius', 'mainnet', 'standalone', 'rinkeby', 'ganache'. --nodeid int ID of the node in order to support multiple nodes on the same machine. 0 by default.  SEE ALSO  leth shop - Features LethShop\u0026rsquo;s pkg capabilities over CLI such as selling/buying digital content.  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/shop/sell/",
	"title": "leth shop sell",
	"tags": [],
	"description": "",
	"content": " leth shop sell Puts an ACL permission to digital content for sale in owner\u0026rsquo;s online shop, smart contract.\nSynopsis Usage:\nleth shop sell --nodeid=1 --network=rinkeby --shop=0xshopIDF16F003897fb927e22438cb1b820f79879 --acl=0xd966aa573f8AcBfEb3724B661B420c258ceA5D38 --price/wei=1000000000000000000 --from=0xadC486F16F003897fb927e22438cb1b820f79879  Possible Outputs:\n{\u0026quot;success\u0026quot;:\u0026quot;true\u0026quot;} {\u0026quot;error\u0026quot;: {\u0026quot;code\u0026quot;: \u0026quot;SOME/INTERNAL/ERROR/CODE\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;explanatory error message\u0026quot;}}  leth shop sell [flags]  Options  --acl leth storage add ACL ID to sell (returned by leth storage add /). --from string The account with rights to sell an ACL permission in the shop. -h, --help help for sell --network string Possible values: 'sirius', 'mainnet', 'standalone', 'rinkeby', 'ganache'. --nodeid int ID of the node in order to support multiple nodes on the same machine. 0 by default. --price/wei string For how much PHTs in Wei can users buy this ACL? --shop leth shop create Shop ID where ACL can be sold/bought. (returned by leth shop create /).  SEE ALSO  leth shop - Features LethShop\u0026rsquo;s pkg capabilities over CLI such as selling/buying digital content.  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/storage/",
	"title": "leth storage",
	"tags": [],
	"description": "",
	"content": " leth storage Features LethStorage\u0026rsquo;s pkg capabilities over CLI such as file upload/download, access authorization\u0026hellip;\nSynopsis Features LethStorage\u0026rsquo;s pkg capabilities over CLI such as file upload/download, access authorization\u0026hellip;\nleth storage [flags]  Options  -h, --help help for storage  SEE ALSO  leth - Lightstreams CLI for interacting with a configured node. leth storage add - Adds file to the secured IPFS storage and returns its meta file. leth storage authorized - Authorizes token permission against specified ACL ID (Deployed Smart Contract Hex Addr). leth storage fetch - Downloads file content from secured IPFS storage based on the meta file. leth storage meta - Fetches the public meta information and returns them.  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/storage/add/",
	"title": "leth storage add",
	"tags": [],
	"description": "",
	"content": " leth storage add Adds file to the secured IPFS storage and returns its meta file.\nSynopsis Usage:\nleth storage add --nodeid=1 --network=rinkeby --owner=0xadC486F16F003897fb927e22438cb1b820f79879 --file=/Users/enchanterio/Documents/secret/file.txt  Possible Outputs:\n{\u0026quot;meta\u0026quot;:\u0026quot;QmSomeIpfsHashdGXrvCgmQHo8Yqo8eLQTvC1sEJh6suBi\u0026quot;,\u0026quot;acl\u0026quot;:\u0026quot;0x5D780255679c55846c1fE1E738e7604425171B50\u0026quot;} {\u0026quot;error\u0026quot;: {\u0026quot;code\u0026quot;: \u0026quot;SOME/INTERNAL/ERROR/CODE\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;explanatory error message\u0026quot;}}  leth storage add [flags]  Options  --file string Absolute path to the file you want to upload to secured storage. -h, --help help for add --network string Possible values: 'sirius', 'mainnet', 'standalone', 'rinkeby', 'ganache'. --nodeid int ID of the node in order to support multiple nodes on the same machine. 0 by default. --owner string File owner address who will pay for the file ACL. The account address was generated when you signed-up.  SEE ALSO  leth storage - Features LethStorage\u0026rsquo;s pkg capabilities over CLI such as file upload/download, access authorization\u0026hellip;  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/storage/authorized/",
	"title": "leth storage authorized",
	"tags": [],
	"description": "",
	"content": " leth storage authorized Authorizes token permission against specified ACL ID (Deployed Smart Contract Hex Addr).\nSynopsis Usage:\nleth storage authorized --nodeid=1 --network=rinkeby --permission=read --acl=0xd966aa573f8AcBfEb3724B661B420c258ceA5D38 --token=eyJibG9ja2NoYWluIjoiRVRIIiwiZXRoX2FkZHJlc3MiOiIweEM5NjZhYTU3MzA4QWNCZkViMzcyNkI2NjFCQzIwYzI1OGNlQTVEMzgiLCJpYXQiOjI3NzExNDUsImVhdCI6Mjc3MTIwNX0.2Z2Qm8MSVaTTVZRbtIjuKjjQXYFuprmmo5Okat85RiIkEwIFQObaimFkCieonHG6dyFqKx6h-hFdGeV8DbtEbAE  Possible Outputs:\n{\u0026quot;is/authorized\u0026quot;:\u0026quot;true\u0026quot;} {\u0026quot;error\u0026quot;: {\u0026quot;code\u0026quot;: \u0026quot;SOME/INTERNAL/ERROR/CODE\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;explanatory error message\u0026quot;}}  leth storage authorized [flags]  Options  --acl string ACL ID (Deployed Smart Contract Hex Addr) associated with the stored file. -h, --help help for authorized --network string Possible values: 'sirius', 'mainnet', 'standalone', 'rinkeby', 'ganache'. --nodeid int ID of the node in order to support multiple nodes on the same machine. 0 by default. --permission string Permission to validate. Possible values: [noaccess,read,write,admin] --token string Token to authenticate.  SEE ALSO  leth storage - Features LethStorage\u0026rsquo;s pkg capabilities over CLI such as file upload/download, access authorization\u0026hellip;  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/storage/fetch/",
	"title": "leth storage fetch",
	"tags": [],
	"description": "",
	"content": " leth storage fetch Downloads file content from secured IPFS storage based on the meta file.\nSynopsis Usage:\nleth storage fetch --nodeid=1 --network=rinkeby --account=0xadC486F16F003897fb927e22438cb1b820f79879 --meta=QmZnx4FPooZoy2kTFzAKhZAzhuQ3EHG8yx2E57GvN2t1vb  Possible Outputs:\n{\u0026quot;output\u0026quot;:\u0026quot;/tmp/secret/file.txt\u0026quot;} {\u0026quot;error\u0026quot;: {\u0026quot;code\u0026quot;: \u0026quot;SOME/INTERNAL/ERROR/CODE\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;explanatory error message\u0026quot;}}  leth storage fetch [flags]  Options  --account string The account address who should be authorized against the content's ACL. The account address was generated when you signed-up. -h, --help help for fetch --meta leth storage upload IPFS file hash of content you want to read from secured storage returned by leth storage upload command. --network string Possible values: 'sirius', 'mainnet', 'standalone', 'rinkeby', 'ganache'. --nodeid int ID of the node in order to support multiple nodes on the same machine. 0 by default.  SEE ALSO  leth storage - Features LethStorage\u0026rsquo;s pkg capabilities over CLI such as file upload/download, access authorization\u0026hellip;  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/storage/meta/",
	"title": "leth storage meta",
	"tags": [],
	"description": "",
	"content": " leth storage meta Fetches the public meta information and returns them.\nSynopsis Usage:\nleth storage meta --nodeid=1 --network=rinkeby --meta=QmZnx4FPooZoy2kTFzAKhZAzhuQ3EHG8yx2E57GvN2t1vb  Possible Outputs:\n{\u0026quot;filename\u0026quot;:\u0026quot;secret/file.txt\u0026quot;,\u0026quot;ext\u0026quot;:\u0026quot;txt\u0026quot;,\u0026quot;owner\u0026quot;:\u0026quot;0xadC486F16F003897fb927e22438cb1b820f79879\u0026quot;,\u0026quot;hash\u0026quot;:\u0026quot;QmRnXxBJg3NjXzuTi91iNYcMff4oz4NwjN7fgtBXp2UbG9\u0026quot;,\u0026quot;acl\u0026quot;:\u0026quot;0x3cb99420c7F16f00ef41B5ace9e0C815F3736879\u0026quot;} {\u0026quot;error\u0026quot;: {\u0026quot;code\u0026quot;: \u0026quot;SOME/INTERNAL/ERROR/CODE\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;explanatory error message\u0026quot;}}  leth storage meta [flags]  Options  -h, --help help for meta --meta leth storage upload IPFS file hash of content you want to get public meta info about. Meta hash was returned by leth storage upload command. --network string Possible values: 'sirius', 'mainnet', 'standalone', 'rinkeby', 'ganache'. --nodeid int ID of the node in order to support multiple nodes on the same machine. 0 by default.  SEE ALSO  leth storage - Features LethStorage\u0026rsquo;s pkg capabilities over CLI such as file upload/download, access authorization\u0026hellip;  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/user/",
	"title": "leth user",
	"tags": [],
	"description": "",
	"content": " leth user Features LethUser\u0026rsquo;s pkg capabilities over CLI such as creating a user, converting him to a token\u0026hellip;\nSynopsis Features LethUser\u0026rsquo;s pkg capabilities over CLI such as creating a user, converting him to a token\u0026hellip;\nleth user [flags]  Options  -h, --help help for user  SEE ALSO  leth - Lightstreams CLI for interacting with a configured node. leth user signin - Generates leth auth token to be used for auth purposes across the LS ecosystem. leth user signup - Creates a new Ethereum account and returns its HEX address.  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/user/signin/",
	"title": "leth user signin",
	"tags": [],
	"description": "",
	"content": " leth user signin Generates leth auth token to be used for auth purposes across the LS ecosystem.\nSynopsis Usage:\nleth user signin --nodeid=1 --network=rinkeby --account=0xadc486f16f003897fb927e22438cb1b820f79879  Possible Outputs:\n{\u0026quot;token\u0026quot;:\u0026quot;eyJibG9ja2NoYWluIjoiRVRIIiwiZXRoX2FkZHJlc3MiOiIweGU5Q2JmNjgzRjQ3OTkwMTEzNGE3QTc4RTkxYzljNTIzM2I4RjlDMDQiLCJpYXQiOjMwNTA0NjcsImVhdCI6MzA1MDUyN30.VkAWASrD/20MggH2laXjPlcFpVVPsoLniyTyyTPwFoYV5EQfZG/p/YP-q8u1eyxOpm5Xq4ai5MMcFnu9HBbAE\u0026quot;} {\u0026quot;error\u0026quot;: {\u0026quot;code\u0026quot;: \u0026quot;SOME/INTERNAL/ERROR/CODE\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;explanatory error message\u0026quot;}}  leth user signin [flags]  Options  --account string Your account HEX address to login with. -h, --help help for signin --network string Possible values: 'sirius', 'mainnet', 'standalone', 'rinkeby', 'ganache'. --nodeid int ID of the node in order to support multiple nodes on the same machine. 0 by default.  SEE ALSO  leth user - Features LethUser\u0026rsquo;s pkg capabilities over CLI such as creating a user, converting him to a token\u0026hellip;  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/user/signup/",
	"title": "leth user signup",
	"tags": [],
	"description": "",
	"content": " leth user signup Creates a new Ethereum account and returns its HEX address.\nSynopsis Usage:\nleth user signup --nodeid=1 --network=rinkeby  Possible Outputs:\n{\u0026quot;account\u0026quot;:\u0026quot;0xadc486f16f003897fb927e22438cb1b820f79879\u0026quot;,\u0026quot;error\u0026quot;:\u0026quot;\u0026quot;} {\u0026quot;account\u0026quot;:\u0026quot;0x0000000000000000000000000000000000000000\u0026quot;,\u0026quot;error\u0026quot;:\u0026quot;some error message\u0026quot;}  leth user signup [flags]  Options  -h, --help help for signup --network string Possible values: 'sirius', 'mainnet', 'standalone', 'rinkeby', 'ganache'. --nodeid int ID of the node in order to support multiple nodes on the same machine. 0 by default.  SEE ALSO  leth user - Features LethUser\u0026rsquo;s pkg capabilities over CLI such as creating a user, converting him to a token\u0026hellip;  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/version/",
	"title": "leth version",
	"tags": [],
	"description": "",
	"content": " leth version Describes version.\nSynopsis Describes version.\nleth version [flags]  Options  -h, --help help for version  SEE ALSO  leth - Lightstreams CLI for interacting with a configured node.  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/wallet/",
	"title": "leth wallet",
	"tags": [],
	"description": "",
	"content": " leth wallet Features LethWallet\u0026rsquo;s pkg capabilities over CLI such as retrieving current balance and transferring funds.\nSynopsis Features LethWallet\u0026rsquo;s pkg capabilities over CLI such as retrieving current balance and transferring funds.\nleth wallet [flags]  Options  -h, --help help for wallet  SEE ALSO  leth - Lightstreams CLI for interacting with a configured node. leth wallet balance - Get account\u0026rsquo;s balance in Wei. leth wallet transfer - Transfer funds from an account to another account.  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/wallet/balance/",
	"title": "leth wallet balance",
	"tags": [],
	"description": "",
	"content": " leth wallet balance Get account\u0026rsquo;s balance in Wei.\nSynopsis Usage:\nleth wallet balance --nodeid=1 --network=rinkeby --account=0xadc486f16f003897fb927e22438cb1b820f79879  Possible Outputs (3ETH):\n{\u0026quot;balance\u0026quot;:\u0026quot;3000000000000000000\u0026quot;,\u0026quot;error\u0026quot;:\u0026quot;\u0026quot;} {\u0026quot;balance\u0026quot;:\u0026quot;0\u0026quot;,\u0026quot;error\u0026quot;:\u0026quot;some error message\u0026quot;}  leth wallet balance [flags]  Options  --account string Account address to check balance for. -h, --help help for balance --network string Possible values: 'sirius', 'mainnet', 'standalone', 'rinkeby', 'ganache'. --nodeid int ID of the node in order to support multiple nodes on the same machine. 0 by default.  SEE ALSO  leth wallet - Features LethWallet\u0026rsquo;s pkg capabilities over CLI such as retrieving current balance and transferring funds.  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/leth/wallet/transfer/",
	"title": "leth wallet transfer",
	"tags": [],
	"description": "",
	"content": " leth wallet transfer Transfer funds from an account to another account.\nSynopsis Usage:\nleth wallet transfer --nodeid=1 --network=rinkeby --from=0xadc486f16f003897fb927e22438cb1b820f79879 --to=0x0dD46808e9780E4a23dd562962300bA029bCfFEf --value=1200000000000000000  Possible Outputs:\n{\u0026quot;success\u0026quot;:\u0026quot;true\u0026quot;} {\u0026quot;error\u0026quot;: {\u0026quot;code\u0026quot;: \u0026quot;SOME/INTERNAL/ERROR/CODE\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;explanatory error message\u0026quot;}}  leth wallet transfer [flags]  Options  --from string Account address to transfer Ether from. -h, --help help for transfer --network string Possible values: 'sirius', 'mainnet', 'standalone', 'rinkeby', 'ganache'. --nodeid int ID of the node in order to support multiple nodes on the same machine. 0 by default. --to string Account address to transfer Ether to. --value string Amount of Ether to transfer in Wei format. 1 ETH = 1000000000000000000 Wei  SEE ALSO  leth wallet - Features LethWallet\u0026rsquo;s pkg capabilities over CLI such as retrieving current balance and transferring funds.  Auto generated by spf13/cobra on 31-May-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/lightchain/",
	"title": "lightchain",
	"tags": [],
	"description": "",
	"content": " lightchain Lightstreams PoA blockchain node.\nSynopsis Lightstreams PoA blockchain node.\nlightchain [flags]  Options  -h, --help help for lightchain  SEE ALSO  lightchain docs - Generates lightchain cmd usage docs based on code into the: \u0026lsquo;docs/cmd/auto/generated\u0026rsquo;. lightchain init - Initializes new lightchain node according to the configured flags. lightchain run - Launches lightchain node and all of its online services including blockchain (Geth) and the consensus (Tendermint). lightchain simulate - Executes init and run commands with active tracing and simulates TXs activity to assert crucial components such as Consensus State, DB, Mempool and others. (testing purposes) lightchain version - Describes version.  Auto generated by spf13/cobra on 27-Feb-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/lightchain/docs/",
	"title": "lightchain docs",
	"tags": [],
	"description": "",
	"content": " lightchain docs Generates lightchain / usage docs based on code into the: \u0026lsquo;docs/cmd/auto/generated\u0026rsquo;.\nSynopsis Generates lightchain / usage docs based on code into the: \u0026lsquo;docs/cmd/auto/generated\u0026rsquo;.\nlightchain docs [flags]  Options  -h, --help help for docs  SEE ALSO  lightchain - Lightstreams PoA blockchain node.  Auto generated by spf13/cobra on 27-Feb-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/lightchain/init/",
	"title": "lightchain init",
	"tags": [],
	"description": "",
	"content": " lightchain init Initializes new lightchain node according to the configured flags.\nSynopsis Initializes new lightchain node according to the configured flags.\nlightchain init [flags]  Options  --datadir string Data directory for the databases and keystore (default \u0026quot;/home/ggarrido/.lightchain\u0026quot;) --force Forces the init by removing the data dir if already exists -h, --help help for init --lvl string Level of logging (default \u0026quot;info\u0026quot;) --mainnet Initialize a node connected to production, MainNet --sirius Initialize a node connected to Sirius network --standalone Data directory for the databases and keystore --trace Whenever to be asserting and reporting blockchain state in real-time (testing, debugging purposes)  SEE ALSO  lightchain - Lightstreams PoA blockchain node.  Auto generated by spf13/cobra on 27-Feb-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/lightchain/run/",
	"title": "lightchain run",
	"tags": [],
	"description": "",
	"content": " lightchain run Launches lightchain node and all of its online services including blockchain (Geth) and the consensus (Tendermint).\nSynopsis Launches lightchain node and all of its online services including blockchain (Geth) and the consensus (Tendermint).\nlightchain run [flags]  Options  --datadir string Data directory for the databases and keystore (default \u0026quot;/home/ggarrido/.lightchain\u0026quot;) -h, --help help for run --lvl string Level of logging (default \u0026quot;info\u0026quot;) --prometheus Enable prometheus metrics exporter --rpc Enable the HTTP-RPC server --rpcaddr string HTTP-RPC server listening interface (default \u0026quot;localhost\u0026quot;) --rpcapi string API's offered over the HTTP-RPC interface --rpccorsdomain string Comma separated list of domains from which to accept cross origin requests (browser enforced) --rpcport int HTTP-RPC server listening port (default 8545) --rpcvhosts string Comma separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard. (default \u0026quot;localhost\u0026quot;) --tmt_p2p_port uint Tendermint port used to achieve exchange messages across nodes (default 26656) --tmt_rpc_port uint Tendermint RPC port used to receive incoming messages from Lightchain (default 26657) --trace Whenever to be asserting and reporting blockchain state in real-time (testing, debugging purposes) --ws Enable the WS-RPC server --wsaddr string WS-RPC server listening interface (default \u0026quot;localhost\u0026quot;) --wsapi string API's offered over the WS-RPC interface --wsorigins string Origins from which to accept websockets requests (default \u0026quot;Origins from which to accept websockets requests\u0026quot;) --wsport int WS-RPC server listening port (default 8546)  SEE ALSO  lightchain - Lightstreams PoA blockchain node.  Auto generated by spf13/cobra on 27-Feb-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/lightchain/simulate/",
	"title": "lightchain simulate",
	"tags": [],
	"description": "",
	"content": " lightchain simulate Executes init and run commands with active tracing and simulates TXs activity to assert crucial components such as Consensus State, DB, Mempool and others. (testing purposes)\nSynopsis Executes init and run commands with active tracing and simulates TXs activity to assert crucial components such as Consensus State, DB, Mempool and others. (testing purposes)\nlightchain simulate [flags]  Options  --abci/protocol string socket | grpc (default \u0026quot;socket\u0026quot;) --datadir string Data directory for the databases and keystore (default \u0026quot;/Users/enchanterio/.lightchain\u0026quot;) -h, --help help for simulate --lvl string Level of logging (default \u0026quot;info\u0026quot;) --prometheus Enable prometheus metrics exporter --rpc Enable the HTTP-RPC server --rpcaddr string HTTP-RPC server listening interface (default \u0026quot;localhost\u0026quot;) --rpcapi string API's offered over the HTTP-RPC interface --rpcport int HTTP-RPC server listening port (default 8545) --sirius Initialize a node connected to Sirius network --standalone Data directory for the databases and keystore --tmt/p2p/port uint Tendermint port used to achieve exchange messages across nodes (default 26656) --tmt/proxy/port uint Lightchain RPC port used to receive incoming messages from Tendermint (default 26658) --tmt/rpc/port uint Tendermint RPC port used to receive incoming messages from Lightchain (default 26657) --trace Whenever to be asserting and reporting blockchain state in real-time (testing, debugging purposes) --tracelog string The filepath to a log file where all tracing output will be persisted (default \u0026quot;/var/folders/f9/11wh9x9j31d75nxgwv2qsj3r0000gn/T/tracer.log\u0026quot;) --ws Enable the WS-RPC server --wsaddr string WS-RPC server listening interface (default \u0026quot;localhost\u0026quot;) --wsport int WS-RPC server listening port (default 8546)  SEE ALSO  lightchain - Lightstreams PoA blockchain node.  Auto generated by spf13/cobra on 27-Feb-2019 "
},
{
	"uri": "https://docs.lightstreams.network/cli-docs/lightchain/version/",
	"title": "lightchain version",
	"tags": [],
	"description": "",
	"content": " lightchain version Describes version.\nSynopsis Describes version.\nlightchain version [flags]  Options  -h, --help help for version  SEE ALSO  lightchain - Lightstreams PoA blockchain node.  Auto generated by spf13/cobra on 27-Feb-2019 "
}]